@charset "UTF-8";

// Type Mixin
//
// @argument {array} $fs-map - font size map
// @argument {array} $fs-breakpoints [$breakpoints] - breakpoint map
//
// Example usage:
//
// the $breakpoints variable is found in core/config/breakpoints.
//
// $base-font-sizes: (
//   null  : (12px, 1.5),
//   small : 1.298vw,
//   medium: 16px
// );
//
// .p{
//   @include font-size($base-font-sizes);
// }
//
// Results:
//
// p {
//   font-size: 12px;
//   line-height: 1.5;
// }
// @media screen and (min-width: 300px) {
//   p {
//     font-size: 1.298vw;
//   }
// }
// @media screen and (min-width: 500px) {
//   p {
//     font-size: 16px;
//   }
// }

//Set Font sizes
@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
 @each $fs-breakpoint, $fs-font-size in $fs-map {
   @if $fs-breakpoint == null {
     @include make-font-size($fs-font-size);
   }
   @else {
     // If $fs-font-size is a key that exists in
     // $fs-breakpoints, use the value
     @if map-has-key($fs-breakpoints, $fs-breakpoint) {
       $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
     }
     @media screen and (min-width: $fs-breakpoint) {
       @include make-font-size($fs-font-size);
     }
   }
 }
}


// Utility function for mixin font-size
//
// @argument {string} $fs-font-size - font size taken from $fs-map loop
//

@mixin make-font-size($fs-font-size) {
 // If $fs-font-size is a list, include
 // both font-size and line-height
 @if type-of($fs-font-size) == "list" {
   font-size: nth($fs-font-size, 1);
   @if (length($fs-font-size) > 1) {
     line-height: nth($fs-font-size, 2);
   }
 }
 @else {
   font-size: $fs-font-size;
 }
}
